#! /bin/ksh
if [ $# = 0  -o  "$1" = "-h" -o "$1" = "-?" ]
then
#------------------------adescription-----------------------------------------
echo 'Convert $1=Month(#/jan) $2=Day(#) <$3>(2/4#,def=presentyr) into Julian Day'
echo '  Y2K/leapyear compliant, but only valid 1940-2099'
exit
fi
### v prints input lines, x prints expanded command 
#4test set -vx
###################################################################

### determine whether leap-year
if [ "$3" = "" ]
then
  yyyy=`date +%Y`
else
  if [ $3 -lt 40 ]
  then
    yyyy=`expr $3 + 2000`
  elif [ $3 -lt 100 ]
  then
    yyyy=`expr $3 + 1900`
  elif [ $3 -gt 1970 -a $3 -lt 2040 ]
  then
    yyyy=$3
  else
    echo "ERROR EXIT: bad argument3 = $3"
    exit 1
  fi
fi
### compute days in february
if [ `expr $yyyy % 4` -ne 0 ]
then
  daypermon[2]='28'
elif [ `expr $yyyy % 400` -ne 0 ]
then
  daypermon[2]='29'
elif [ `expr $yyyy % 100` -ne 0 ]
then
  daypermon[2]='28'
else
  daypermon[2]='29'
fi
daypermon[1]='31'
daypermon[3]='31'
daypermon[4]='30'
daypermon[5]='31'
daypermon[6]='30'
daypermon[7]='31'
daypermon[8]='31'
daypermon[9]='30'
daypermon[10]='31'
daypermon[11]='30'
daypermon[12]='31'
imonth=$1
testmon=` echo $1 | tr '[A-Z]' '[a-z]'`
if   [ $testmon = jan ]
then imonth=1 
elif [ $testmon = feb ]
then imonth=2 
elif [ $testmon = mar ]
then imonth=3 
elif [ $testmon = apr ]
then imonth=4 
elif [ $testmon = may ]
then imonth=5 
elif [ $testmon = jun ]
then imonth=6 
elif [ $testmon = jul ]
then imonth=7 
elif [ $testmon = aug ]
then imonth=8 
elif [ $testmon = sep ]
then imonth=9 
elif [ $testmon = oct ]
then imonth=10
elif [ $testmon = nov ]
then imonth=11
elif [ $testmon = dec ]
then imonth=12
fi
if [ $imonth -lt 1 -o $imonth -gt 12 ]
then echo "Bad input month = $imonth"
     exit
fi
if [ $2 -lt 1 -o $2 -gt 31 ]
then echo "Bad input day = $2"
     exit
fi
jdate=$2
i=1
while [ $i -ne $imonth ]
do
let "jdate = daypermon[$i] + $jdate"
let "i = i + 1"
done
echo "$jdate"




