#! /bin/bash
### above needed to allow env.parameter using rasp.site.runenvironment ??

if [ $# -eq 0 -o "$1" = "-?" ]
then
#-----------------adescription1------------------------------------
echo 'Run normal daily rasp.pl job for domainarg <-z> $SITE <$*>'
echo 'optional -z includes 1hr sleep IF DaylightTime'
echo 'optional $* defaults to "-M 0" if not specified'
echo '(expect to run from cron - so sans normal profile & print only errors)'
echo '(if NOT run from cron, use nohup and &)'
echo '(*NB* MUST BE CALLED EITHER WITH NO PATH FROM RUN DIRECTORY OR WITH FULL PATH NAME !!!)'
exit
fi
##################################################################
#4no_undefined: treat unset variable as an error when substituting: set -u
#4no_file_glob: disable filename generation: set -f
#4exit_on_error: exit if command has non-zero exit status: set -e
#4test: set -vx
##################################################################

###### *NB* MUST BE CALLED WITH FULL PATH NAME SO THAT $PWD CAN BE DETERMINED !!!

#################################################################################
##########  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  ###########
##########  *NB* EDITING MAY CAUSE PROBLEMS IN EXISTING RUNNING JOBS  ###########
##########  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  ###########
#################################################################################

### SET FLAG TO SEND EMAIL IF STDERR NOT EMPTY
LSENDSTDERREMAIL=1

########################################

### SET RUN DIRECTORY TO THAT OF THIS FILE
if [ `echo $0 | cut -c1` = "/" ]
then 
  SCRIPTDIR=`echo "${0}" | sed 's|/[^/]*$||'` 
else
  SCRIPTDIR=`echo "${PWD}/${0}" | sed 's|[\./]*/[^/]*$||'`  # eliminate possible /./
fi
#bad SCRIPTDIR=`echo "${PWD}/${0}" | sed 's|[\./]*/[^/]*$||'`  # eliminate possible /./
#4test: echo "SCRIPTDIR= $SCRIPTDIR"

cd $SCRIPTDIR
#old cd /home/admin/DRJACK/RASP/RUN

### USER-SPECIFIC PARAMETER 
### SET LOCAL EMAIL ADDRESS for error messages (blank sends no messages)
### now extract admin email address from rasp.site.parameters - allow both ' and " delimiter in rasp.site.parameters assignment
ADMIN_EMAIL_ADDRESS=`sed -n "/^ *\\\$ADMIN_EMAIL_ADDRESS/s/^.*= *['\"]\([^'\"]*\)['\"].*$/\1/p" rasp.site.parameters`
#hard-wired: ADMIN_EMAIL_ADDRESS='admindejour@drjack.info'

### IF -z ARGUMENT SPECIFIED, DELAY 1HR IF DAYLIGHT SAVINGS TIME so crontab time can always be local time
if [ "$1" = "-z" ]
then
  shift
  DAYLIGHTSAVING=`perl -e '@TIME=localtime(time); print "$TIME[8]";'`
  if [ $DAYLIGHTSAVING -gt 0 ]
  then sleep 3600
  fi
fi

### SET MODEL ARGUMENTS
SITEARG=`echo $1 | tr '[a-z]' '[A-Z]'`
sitearg=`echo $1 | tr '[A-Z]' '[a-z]'`
shift
if [ $# -eq 0 ]
then
  arglist='-M 0'
else
  arglist=$*
fi

### TEST FOR RUN SCRIPT
if [ ! -s rasp.pl ]
then
  echo "***ERROR EXIT: rasp.pl not found"
  exit 1
fi

### SAVE OLD FILES, CREATE SITE-SPECIFIC EXECUTABLE 
### save files from previous job
mv -f rasp.${sitearg}.pl       previous.rasp.${sitearg}.pl        2>/dev/null
mv -f rasp.${sitearg}.printout previous.rasp.${sitearg}.printout  2>/dev/null
mv -f rasp.${sitearg}.stdout   previous.rasp.${sitearg}.stdout    2>/dev/null
mv -f rasp.${sitearg}.stderr   previous.rasp.${sitearg}.stderr    2>/dev/null
cp -p rasp.pl rasp.${sitearg}.pl
### if rasp.pl has changed, save old version results to help debug any errors added to new version
if [ -f previous.rasp.${sitearg}.pl ]
then
  cmp -s rasp.${sitearg}.pl previous.rasp.${sitearg}.pl
  if [ $? -gt 0 ]
  then
    cp -pf previous.rasp.${sitearg}.pl old.rasp.${sitearg}.pl               2>/dev/null
    cp -pf previous.rasp.${sitearg}.printout old.rasp.${sitearg}.printout   2>/dev/null
    cp -pf previous.rasp.${sitearg}.stdout old.rasp.${sitearg}.stdout       2>/dev/null
    cp -pf previous.rasp.${sitearg}.stderr old.rasp.${sitearg}.stderr       2>/dev/null
  fi
fi

### SET OPTIONAL ENVIRONMENTAL PARAMETERS
if [ -f ./rasp.site.runenvironment ]
then
  source ./rasp.site.runenvironment
fi 

### RUN JOB
#nice: nice ./rasp.${sitearg}.pl $SITEARG $arglist >| rasp.${sitearg}.stdout 2>| rasp.${sitearg}.stderr
#not-nice:
 ./rasp.${sitearg}.pl $SITEARG $arglist >| rasp.${sitearg}.stdout 2>| rasp.${sitearg}.stderr

### SEND EMAIL IF stderr not empty
#unused filesize=`ls -l -d rasp.${sitearg}.stderr | tr -s ' ' | cut -f5 -d' '`
#if [ -s rasp.${sitearg}.stderr -a $LSENDSTDERREMAIL -eq 1 -a "$ADMIN_EMAIL_ADDRESS" != "" -a "$ADMIN_EMAIL_ADDRESS" != " " ]
#then
#  tail rasp.${sitearg}.stderr | mail -s "WRITES in rasp.${sitearg}.stderr" $ADMIN_EMAIL_ADDRESS
#fi

